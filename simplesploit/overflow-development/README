This and all included files are licensed GPLv2. See LICENSE for licensing
details.

This is some python code I threw together to aid in developing
and debugging buffer overflows.  I've used it on MIPS but it should
theoretically work with any 32-bit architecture.

Sorry, I'm not working with any 64-bit architectures at the moment, so I haven't
added any 64-bit support in.  This should mainly affect the RopGadget class.

There's nothing sophisticated here.  Basically this generates a buffer overflow
pattern with parts of the pattern replaced with a list of replacement
sections you provide.  For example you may want to generate a buffer overflow
string 1024 bytes in length, and have pieces of it at specific offets replaced
with memory addresses, and another section of it replaced with an executable
payload.

Memory addresses are converted to the specified endianness before plugged into
the base overflow string.

If you specify a section to be replaced that won't fit within the requested
length, an exception is raised, identifying the replacement section object
that violates the overflow length.

An OverflowBuffer also provides an instance method, find_offset(), that will locate
the offset of a given substring, to aid in debugging buffer overflows. 

If this seems useful to anyone who wants to help me make it suck less, please
get in touch.

(C) 2013  Zachary Cutlip [uid000_at_gmail_dot_com]
Twitter: @zcutlip

